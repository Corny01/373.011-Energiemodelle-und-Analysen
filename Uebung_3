{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Übung 3 - Kraftwerkseinsatzplanung\n",
    "\n",
    "## Aufgabe 3.1 – Fossile Erzeugung"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "a) Kostenminimaler Kraftwerkseinsatz:Werte der Entscheidungsvariable x\n",
    "\n",
    "b) Graph zeigt, dass GuD immer mit voller Leistung läuft (wegen niedrigsten Grenzkosten). Kolhe läuft ebenfalss immer, aber nur bei hoher Nachfrage auch unter Volllast. Gasturbine wird nur bei Spitzenlast abgerufen.\n",
    "\n",
    "c) Schattenvariablenwert (Schattenpreis) gibt an, wie stark sich die Gesamtkosten für die Stromerzeugung ändern, wenn die Lastbedingung um eine Einheit gelockert wird.-> genaue Interpretation, wenn wir die Werte haben\n",
    "\n",
    "d) Optimaler Wettbewerb bedeutet, dass der Strompreis den Grenzkosten der teuersten einspeisenden Technologie entspricht. In unserem Fall also den Grenzkosten des Kohlekraftwerks, welches immer einspeist. Nur zwischen 7 und 20 Uhr speist auch das Gaskraftwerk ein und der Strompreis entspricht den Grenzkosten dieses Kraftwerks."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Einspeiseleistung des GuD -Kraftwerks\n",
      "Stunde 0 : 400.0 MW\n",
      "Stunde 1 : 400.0 MW\n",
      "Stunde 2 : 400.0 MW\n",
      "Stunde 3 : 400.0 MW\n",
      "Stunde 4 : 400.0 MW\n",
      "Stunde 5 : 400.0 MW\n",
      "Stunde 6 : 400.0 MW\n",
      "Stunde 7 : 400.0 MW\n",
      "Stunde 8 : 400.0 MW\n",
      "Stunde 9 : 400.0 MW\n",
      "Stunde 10 : 400.0 MW\n",
      "Stunde 11 : 400.0 MW\n",
      "Stunde 12 : 400.0 MW\n",
      "Stunde 13 : 400.0 MW\n",
      "Stunde 14 : 400.0 MW\n",
      "Stunde 15 : 400.0 MW\n",
      "Stunde 16 : 400.0 MW\n",
      "Stunde 17 : 400.0 MW\n",
      "Stunde 18 : 400.0 MW\n",
      "Stunde 19 : 400.0 MW\n",
      "Stunde 20 : 400.0 MW\n",
      "Stunde 21 : 400.0 MW\n",
      "Stunde 22 : 400.0 MW\n",
      "Stunde 23 : 400.0 MW\n",
      "\n",
      "Einspeiseleistung des Kohle -Kraftwerks\n",
      "Stunde 0 : 320.0 MW\n",
      "Stunde 1 : 280.0 MW\n",
      "Stunde 2 : 240.0 MW\n",
      "Stunde 3 : 220.0 MW\n",
      "Stunde 4 : 220.0 MW\n",
      "Stunde 5 : 260.0 MW\n",
      "Stunde 6 : 540.0 MW\n",
      "Stunde 7 : 600.0 MW\n",
      "Stunde 8 : 600.0 MW\n",
      "Stunde 9 : 600.0 MW\n",
      "Stunde 10 : 600.0 MW\n",
      "Stunde 11 : 600.0 MW\n",
      "Stunde 12 : 600.0 MW\n",
      "Stunde 13 : 600.0 MW\n",
      "Stunde 14 : 600.0 MW\n",
      "Stunde 15 : 600.0 MW\n",
      "Stunde 16 : 600.0 MW\n",
      "Stunde 17 : 600.0 MW\n",
      "Stunde 18 : 600.0 MW\n",
      "Stunde 19 : 600.0 MW\n",
      "Stunde 20 : 600.0 MW\n",
      "Stunde 21 : 500.0 MW\n",
      "Stunde 22 : 440.0 MW\n",
      "Stunde 23 : 400.0 MW\n",
      "\n",
      "Einspeiseleistung des Gasturbine -Kraftwerks\n",
      "Stunde 0 : 0.0 MW\n",
      "Stunde 1 : 0.0 MW\n",
      "Stunde 2 : 0.0 MW\n",
      "Stunde 3 : 0.0 MW\n",
      "Stunde 4 : 0.0 MW\n",
      "Stunde 5 : 0.0 MW\n",
      "Stunde 6 : 0.0 MW\n",
      "Stunde 7 : 40.0 MW\n",
      "Stunde 8 : 140.0 MW\n",
      "Stunde 9 : 160.0 MW\n",
      "Stunde 10 : 210.0 MW\n",
      "Stunde 11 : 220.0 MW\n",
      "Stunde 12 : 200.0 MW\n",
      "Stunde 13 : 180.0 MW\n",
      "Stunde 14 : 170.0 MW\n",
      "Stunde 15 : 190.0 MW\n",
      "Stunde 16 : 200.0 MW\n",
      "Stunde 17 : 240.0 MW\n",
      "Stunde 18 : 250.0 MW\n",
      "Stunde 19 : 120.0 MW\n",
      "Stunde 20 : 0.0 MW\n",
      "Stunde 21 : 0.0 MW\n",
      "Stunde 22 : 0.0 MW\n",
      "Stunde 23 : 0.0 MW\n",
      "\n",
      "Gesamtkosten der Stromversorgung:  2123691.51 €\n",
      "Gesamtemissionen:  14560.59 tCO2\n"
     ]
    }
   ],
   "source": [
    "# 3.1 a)\n",
    "import pyomo.environ as pyo\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "\n",
    "T = 24\n",
    "timesteps = np.arange(T)\n",
    "\n",
    "c_CO2 = 80 # EUR/tCO2\n",
    "\n",
    "# Marginal costs der thermischen Kraftwerke berechnen\n",
    "# Achtung: entspricht nicht allen Werten in der Angabe! \n",
    "thermalPlant = ['GuD', 'Kohle', 'Gasturbine']\n",
    "power = {'Kohle': 600,\n",
    "         'GuD': 400,\n",
    "         'Gasturbine': 300} # MW\n",
    "efficiency = {'Kohle': 0.41,\n",
    "         'GuD': 0.58,\n",
    "         'Gasturbine': 0.4} \n",
    "fuel_price = {'Kohle': 10,\n",
    "         'GuD': 30,\n",
    "         'Gasturbine': 30} # EUR/MWhprim\n",
    "emission_factor = {'Kohle': 0.35,\n",
    "         'GuD': 0.2,\n",
    "         'Gasturbine': 0.2} # tCO2/MWhprim\n",
    "MC = {} # marginal costs in EUR/MWh\n",
    "emissions = {} # emissions in tCO2/MWh\n",
    "for n in thermalPlant:\n",
    "    MC[n] = (fuel_price[n] + emission_factor[n] * c_CO2) / efficiency[n]\n",
    "    emissions[n] = emission_factor[n] / efficiency[n]\n",
    "    \n",
    "# Daten einlesen\n",
    "df = pd.read_excel('Last_PV_Wind.xlsx')\n",
    "load = df['Last Winter [MW]'] # Daten für Gruppe 12\n",
    "\n",
    "# Pyomo Modell aufstellen\n",
    "\n",
    "model = ConcreteModel()\n",
    "model.dual = pyo.Suffix(direction=pyo.Suffix.IMPORT)\n",
    "model.x = Var(thermalPlant, timesteps, within = NonNegativeReals)\n",
    "\n",
    "# Zielfunktion\n",
    "model.obj = Objective(\n",
    "    expr =sum(model.x[n,t]*MC[n] for n in thermalPlant for t in timesteps), \n",
    "    sense=minimize)\n",
    "\n",
    "# Erste Nebenbedingung: Aktuelle Leistung der Kraftwerke darf nur maximal so groß sein wie die maximal verfügbare Leistung\n",
    "def power_constraint_rule(model, n, t):    \n",
    "   return model.x[n,t] <= power[n]\n",
    "\n",
    "model.power_con = Constraint(thermalPlant, \n",
    "                             timesteps, \n",
    "                             rule = power_constraint_rule)\n",
    "\n",
    "# Zweite Nebenbedingung: Die Summe der Erzeugung zu einem Zeitpunkt muss genauso groß sein wie die Last selbst (ohne Speicher)\n",
    "def load_constraint_rule(model, t):    \n",
    "   return sum(model.x[n,t] for n in thermalPlant) == load.loc[t]\n",
    "model.load_con = Constraint(timesteps, \n",
    "                            rule = load_constraint_rule)\n",
    "\n",
    "# Lösen des Problems mit Gurobi\n",
    "opt = SolverFactory('gurobi')\n",
    "opt_success = opt.solve(model)\n",
    "\n",
    "# Modell ausgeben (Kostenminimaler Kraftwerkseinsatz), also wie viel Leistung von jedem Kraftwerk pro Stunde geliefert werden muss\n",
    "# model.display()\n",
    "\n",
    "# get values of optimization variables\n",
    "PowerThermal = pd.DataFrame(index = timesteps, columns = thermalPlant)\n",
    "for n in thermalPlant:\n",
    "    print()\n",
    "    print(\"Einspeiseleistung des\", n, \"-Kraftwerks\")\n",
    "    for t in timesteps:\n",
    "        PowerThermal.loc[t, n] = model.x[n,t].value\n",
    "        print(\"Stunde\", t, \":\", PowerThermal.loc[t, n], \"MW\")\n",
    "print()    \n",
    "\n",
    "# Gesamtkosten der Stromversorgung ausgeben (Lösung des Modells der Minimierung der Kosten)\n",
    "print(\"Gesamtkosten der Stromversorgung: \", np.round(model.obj(), 2), \"€\")\n",
    "\n",
    "# Gesamte Treibhausgasemissionen berechnen\n",
    "total_energy_coal = PowerThermal['Kohle'].sum()\n",
    "total_energy_GuD = PowerThermal['GuD'].sum()\n",
    "total_energy_gas = PowerThermal['Gasturbine'].sum()\n",
    "\n",
    "total_emissions = total_energy_coal * emissions['Kohle'] + total_energy_GuD * emissions['GuD'] + total_energy_gas * emissions['Gasturbine']\n",
    "print(\"Gesamtemissionen: \", np.round(total_emissions, 2), \"tCO2\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3.1 b) Graphische Darstellung der Situation        \n",
    "# Ausgeben und Plotten\n",
    "\n",
    "sns.set()\n",
    "fig, ax = plt.subplots()\n",
    "ax.stackplot(timesteps, \n",
    "             PowerThermal.to_numpy(dtype = float).transpose(), \n",
    "             labels=thermalPlant)\n",
    "ax.set_title('Kraftwerkseinsatzplanung für einen Tag')\n",
    "ax.legend(loc='upper left')\n",
    "ax.set_ylabel('Erzeugung [MW]')\n",
    "ax.set_xlabel('Stunden [h]')\n",
    "ax.set_xlim(xmin=timesteps[0], xmax=timesteps[-1])\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Werte der Schattenvariable bezüglich Lastbeschränkung\n",
      "Stunde 0 : 92.68 €/MWh\n",
      "Stunde 1 : 92.68 €/MWh\n",
      "Stunde 2 : 92.68 €/MWh\n",
      "Stunde 3 : 92.68 €/MWh\n",
      "Stunde 4 : 92.68 €/MWh\n",
      "Stunde 5 : 92.68 €/MWh\n",
      "Stunde 6 : 92.68 €/MWh\n",
      "Stunde 7 : 115.0 €/MWh\n",
      "Stunde 8 : 115.0 €/MWh\n",
      "Stunde 9 : 115.0 €/MWh\n",
      "Stunde 10 : 115.0 €/MWh\n",
      "Stunde 11 : 115.0 €/MWh\n",
      "Stunde 12 : 115.0 €/MWh\n",
      "Stunde 13 : 115.0 €/MWh\n",
      "Stunde 14 : 115.0 €/MWh\n",
      "Stunde 15 : 115.0 €/MWh\n",
      "Stunde 16 : 115.0 €/MWh\n",
      "Stunde 17 : 115.0 €/MWh\n",
      "Stunde 18 : 115.0 €/MWh\n",
      "Stunde 19 : 115.0 €/MWh\n",
      "Stunde 20 : 92.68 €/MWh\n",
      "Stunde 21 : 92.68 €/MWh\n",
      "Stunde 22 : 92.68 €/MWh\n",
      "Stunde 23 : 92.68 €/MWh\n"
     ]
    }
   ],
   "source": [
    "# 3.1 c) Stündliche Werte der Schattenvariable\n",
    "\n",
    "print(\"Werte der Schattenvariable bezüglich Lastbeschränkung\")\n",
    "dual_values = []\n",
    "for t in timesteps:\n",
    "    value = model.dual[model.load_con[t]]\n",
    "    dual_values.append(value)\n",
    "    print(\"Stunde\", t, \":\", np.round(dual_values[t],2), \"€/MWh\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stromkosten in Stunde 0 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 1 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 2 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 3 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 4 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 5 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 6 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 7 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 8 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 9 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 10 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 11 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 12 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 13 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 14 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 15 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 16 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 17 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 18 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 19 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 20 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 21 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 22 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 23 : 92.68 €/MWh\n"
     ]
    }
   ],
   "source": [
    "# 3.1 d) Stündlicher Strompreis\n",
    "\n",
    "for t in timesteps:\n",
    "    maxMC=0\n",
    "    for n in thermalPlant:\n",
    "        if model.x[n,t].value >0:\n",
    "            if MC[n] > maxMC:\n",
    "                maxMC = MC[n]\n",
    "    print('Stromkosten in Stunde', t, ':', np.round(maxMC,2), '€/MWh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Einspeiseleistung GuD\n",
      "Stunde 0 : 400.0 MW\n",
      "Stunde 1 : 400.0 MW\n",
      "Stunde 2 : 400.0 MW\n",
      "Stunde 3 : 400.0 MW\n",
      "Stunde 4 : 400.0 MW\n",
      "Stunde 5 : 400.0 MW\n",
      "Stunde 6 : 400.0 MW\n",
      "Stunde 7 : 400.0 MW\n",
      "Stunde 8 : 400.0 MW\n",
      "Stunde 9 : 400.0 MW\n",
      "Stunde 10 : 400.0 MW\n",
      "Stunde 11 : 400.0 MW\n",
      "Stunde 12 : 400.0 MW\n",
      "Stunde 13 : 400.0 MW\n",
      "Stunde 14 : 400.0 MW\n",
      "Stunde 15 : 400.0 MW\n",
      "Stunde 16 : 400.0 MW\n",
      "Stunde 17 : 400.0 MW\n",
      "Stunde 18 : 400.0 MW\n",
      "Stunde 19 : 400.0 MW\n",
      "Stunde 20 : 400.0 MW\n",
      "Stunde 21 : 400.0 MW\n",
      "Stunde 22 : 400.0 MW\n",
      "Stunde 23 : 400.0 MW\n",
      "\n",
      "Einspeiseleistung Kohle\n",
      "Stunde 0 : 160.3257328990228 MW\n",
      "Stunde 1 : 146.31921824104234 MW\n",
      "Stunde 2 : 114.13680781758956 MW\n",
      "Stunde 3 : 104.885993485342 MW\n",
      "Stunde 4 : 127.65472312703582 MW\n",
      "Stunde 5 : 148.30618892508141 MW\n",
      "Stunde 6 : 433.2964169381107 MW\n",
      "Stunde 7 : 528.2801302931596 MW\n",
      "Stunde 8 : 570.7491856677525 MW\n",
      "Stunde 9 : 567.5114006514658 MW\n",
      "Stunde 10 : 587.2540716612377 MW\n",
      "Stunde 11 : 593.0 MW\n",
      "Stunde 12 : 600.0 MW\n",
      "Stunde 13 : 600.0 MW\n",
      "Stunde 14 : 600.0 MW\n",
      "Stunde 15 : 600.0 MW\n",
      "Stunde 16 : 600.0 MW\n",
      "Stunde 17 : 600.0 MW\n",
      "Stunde 18 : 600.0 MW\n",
      "Stunde 19 : 600.0 MW\n",
      "Stunde 20 : 511.85667752443 MW\n",
      "Stunde 21 : 377.9478827361563 MW\n",
      "Stunde 22 : 294.00651465798046 MW\n",
      "Stunde 23 : 239.1530944625407 MW\n",
      "\n",
      "Einspeiseleistung Gasturbine\n",
      "Stunde 0 : 0.0 MW\n",
      "Stunde 1 : 0.0 MW\n",
      "Stunde 2 : 0.0 MW\n",
      "Stunde 3 : 0.0 MW\n",
      "Stunde 4 : 0.0 MW\n",
      "Stunde 5 : 0.0 MW\n",
      "Stunde 6 : 0.0 MW\n",
      "Stunde 7 : 0.0 MW\n",
      "Stunde 8 : 0.0 MW\n",
      "Stunde 9 : 0.0 MW\n",
      "Stunde 10 : 0.0 MW\n",
      "Stunde 11 : 0.0 MW\n",
      "Stunde 12 : 9.201954397394047 MW\n",
      "Stunde 13 : 20.0 MW\n",
      "Stunde 14 : 72.0 MW\n",
      "Stunde 15 : 131.0 MW\n",
      "Stunde 16 : 141.17915309446244 MW\n",
      "Stunde 17 : 168.37133550488602 MW\n",
      "Stunde 18 : 158.43648208469062 MW\n",
      "Stunde 19 : 33.12703583061898 MW\n",
      "Stunde 20 : 0.0 MW\n",
      "Stunde 21 : 0.0 MW\n",
      "Stunde 22 : 0.0 MW\n",
      "Stunde 23 : 0.0 MW\n",
      "\n",
      "Einspeiseleistung Wind\n",
      "Stunde 0 : 159.6742671009772 MW\n",
      "Stunde 1 : 133.68078175895766 MW\n",
      "Stunde 2 : 125.86319218241043 MW\n",
      "Stunde 3 : 115.11400651465799 MW\n",
      "Stunde 4 : 92.34527687296416 MW\n",
      "Stunde 5 : 111.69381107491857 MW\n",
      "Stunde 6 : 102.70358306188925 MW\n",
      "Stunde 7 : 97.71986970684038 MW\n",
      "Stunde 8 : 139.25081433224756 MW\n",
      "Stunde 9 : 150.4885993485342 MW\n",
      "Stunde 10 : 173.7459283387622 MW\n",
      "Stunde 11 : 179.0 MW\n",
      "Stunde 12 : 145.79804560260587 MW\n",
      "Stunde 13 : 120.0 MW\n",
      "Stunde 14 : 70.0 MW\n",
      "Stunde 15 : 45.0 MW\n",
      "Stunde 16 : 54.82084690553746 MW\n",
      "Stunde 17 : 71.62866449511401 MW\n",
      "Stunde 18 : 91.56351791530945 MW\n",
      "Stunde 19 : 86.8729641693811 MW\n",
      "Stunde 20 : 88.14332247557003 MW\n",
      "Stunde 21 : 122.05211726384364 MW\n",
      "Stunde 22 : 145.99348534201954 MW\n",
      "Stunde 23 : 160.8469055374593 MW\n",
      "\n",
      "Einspeiseleistung PV\n",
      "Stunde 0 : 0.0 MW\n",
      "Stunde 1 : 0.0 MW\n",
      "Stunde 2 : 0.0 MW\n",
      "Stunde 3 : 0.0 MW\n",
      "Stunde 4 : 0.0 MW\n",
      "Stunde 5 : 0.0 MW\n",
      "Stunde 6 : 4.0 MW\n",
      "Stunde 7 : 14.0 MW\n",
      "Stunde 8 : 30.0 MW\n",
      "Stunde 9 : 42.0 MW\n",
      "Stunde 10 : 49.0 MW\n",
      "Stunde 11 : 48.0 MW\n",
      "Stunde 12 : 45.0 MW\n",
      "Stunde 13 : 40.0 MW\n",
      "Stunde 14 : 28.0 MW\n",
      "Stunde 15 : 14.0 MW\n",
      "Stunde 16 : 4.0 MW\n",
      "Stunde 17 : 0.0 MW\n",
      "Stunde 18 : 0.0 MW\n",
      "Stunde 19 : 0.0 MW\n",
      "Stunde 20 : 0.0 MW\n",
      "Stunde 21 : 0.0 MW\n",
      "Stunde 22 : 0.0 MW\n",
      "Stunde 23 : 0.0 MW\n",
      "\n",
      "Gesamtkosten der Stromversorgung:  1800778.92 €\n",
      "Gesamtemissionen:  12473.68 tCO2\n"
     ]
    }
   ],
   "source": [
    "# 3.2 a) Modell inkl. eE\n",
    "wind = df['Wind 300 MW'] # Daten für Gruppe 12\n",
    "pv = df['PV 200 MW Winter'] # Daten für Gruppe 12\n",
    "\n",
    "Generators=['GuD','Kohle', 'Gasturbine', 'Wind', 'PV']\n",
    "\n",
    "power_all = pd.DataFrame(index=timesteps, columns=Generators) #Leistung ist jetzt nicht mehr zeitunabhängig\n",
    "for t in timesteps:\n",
    "    for p in thermalPlant:\n",
    "        power_all.at[t, p] = power[p] #Leistungswert der thermischen Kraftwerke gilt in jeder Stunde\n",
    "    power_all.at[t,'Wind'] = wind.at[t] \n",
    "    power_all.at[t,'PV'] = pv.at[t]\n",
    "\n",
    "MC = {} # marginal costs in EUR/MWh\n",
    "emissions = {} # emissions in tCO2/MWh\n",
    "for g in Generators: #Grenzkosten und Emissionen als Null definieren\n",
    "    MC[g] = 0\n",
    "    emissions[g] = 0\n",
    "\n",
    "for n in thermalPlant: # Grenzkosten und Emissionen von thermischen Kraftwerken überschreiben\n",
    "    MC[n] = (fuel_price[n] + emission_factor[n] * c_CO2) / efficiency[n]\n",
    "    emissions[n] = emission_factor[n] / efficiency[n]\n",
    "\n",
    "\n",
    "# Pyomo Modell aufstellen\n",
    "\n",
    "model = ConcreteModel()\n",
    "model.x = Var(Generators, timesteps, within = NonNegativeReals)\n",
    "\n",
    "# Zielfunktion angeben!\n",
    "model.obj = Objective(\n",
    "    expr =sum(sum(model.x[g,t]*MC[g] for g in Generators)for t in timesteps), # nur die Summe ändert sich und läuft über alle Generators und nicht nur thermalPlant\n",
    "    sense=minimize)\n",
    "\n",
    "def all_power_constraint_rule(model, g, t): #hab sie neu benannt, aber eigentlich unnötig\n",
    "   return model.x[g,t] <= power_all.loc[t,g]\n",
    "model.all_power_con = Constraint(Generators, \n",
    "                             timesteps, \n",
    "                             rule = all_power_constraint_rule)\n",
    "\n",
    "def all_load_constraint_rule(model, t): #hab sie neu benannt, aber eigentlich unnötig   \n",
    "   return sum(model.x[g,t] for g in Generators) == load.loc[t]\n",
    "model.load_con = Constraint(timesteps, \n",
    "                            rule = all_load_constraint_rule)\n",
    "\n",
    "def wind_constraint_rule(model,t):\n",
    "    return (model.x['Wind',t]) == power_all.loc[t, 'Wind']\n",
    "model.wind_con = Constraint(timesteps, rule = wind_constraint_rule)\n",
    "\n",
    "def pv_constraint_rule(model,t):\n",
    "    return (model.x['PV',t]) == power_all.loc[t, 'PV']\n",
    "model.pv_con = Constraint(timesteps, rule = pv_constraint_rule)  \n",
    "\n",
    "\n",
    "opt = SolverFactory('gurobi')\n",
    "opt_success = opt.solve(model)\n",
    "\n",
    "# get values of optimization variables\n",
    "PowerTotal = pd.DataFrame(index = timesteps, columns = Generators)\n",
    "for n in Generators:\n",
    "    print()\n",
    "    print(\"Einspeiseleistung\", n,)\n",
    "    for t in timesteps:\n",
    "        PowerTotal.loc[t, n] = model.x[n,t].value\n",
    "        print(\"Stunde\", t, \":\", PowerTotal.loc[t, n], \"MW\")\n",
    "print()\n",
    "\n",
    "# Gesamtkosten der Stromversorgung ausgeben (Lösung des Modells der Minimierung der Kosten)\n",
    "print(\"Gesamtkosten der Stromversorgung: \", np.round(model.obj(), 2), \"€\")\n",
    "\n",
    "# Gesamte Treibhausgasemissionen berechnen\n",
    "total_energy_coal = PowerTotal['Kohle'].sum()\n",
    "total_energy_GuD = PowerTotal['GuD'].sum()\n",
    "total_energy_gas = PowerTotal['Gasturbine'].sum()\n",
    "total_emissions = total_energy_coal * emissions['Kohle'] + total_energy_GuD * emissions['GuD'] + total_energy_gas * emissions['Gasturbine']\n",
    "print(\"Gesamtemissionen: \", np.round(total_emissions, 2), \"tCO2\")\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# 3.2 b) Graph\n",
    "\n",
    "# plot\n",
    "\n",
    "sns.set()\n",
    "\n",
    "fig, ax = plt.subplots()\n",
    "ax.stackplot(timesteps, \n",
    "             PowerTotal.to_numpy(dtype = float).transpose(), \n",
    "             labels=Generators)\n",
    "ax.set_title('Kraftwerkseinsatzplanung')\n",
    "ax.legend(loc='upper left')\n",
    "ax.set_ylabel('Erzeugung [MW]')\n",
    "ax.set_xlim(xmin=timesteps[0], xmax=timesteps[-1])\n",
    "fig.tight_layout()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stromkosten in Stunde 0 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 1 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 2 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 3 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 4 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 5 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 6 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 7 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 8 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 9 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 10 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 11 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 12 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 13 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 14 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 15 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 16 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 17 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 18 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 19 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 20 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 21 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 22 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 23 : 92.68 €/MWh\n"
     ]
    }
   ],
   "source": [
    "# 3.2 c) Stündlicher Strompreis\n",
    "\n",
    "for t in timesteps:\n",
    "    maxMC=0\n",
    "    for n in Generators:\n",
    "        if model.x[n,t].value >0:\n",
    "            if MC[n] > maxMC:\n",
    "                maxMC = MC[n]\n",
    "    print('Stromkosten in Stunde', t, ':', np.round(maxMC,2), '€/MWh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Einspeiseleistung GuD n\n",
      "Stunde 0 : 400.0 MW\n",
      "Stunde 1 : 400.0 MW\n",
      "Stunde 2 : 400.0 MW\n",
      "Stunde 3 : 400.0 MW\n",
      "Stunde 4 : 400.0 MW\n",
      "Stunde 5 : 400.0 MW\n",
      "Stunde 6 : 400.0 MW\n",
      "Stunde 7 : 400.0 MW\n",
      "Stunde 8 : 400.0 MW\n",
      "Stunde 9 : 400.0 MW\n",
      "Stunde 10 : 400.0 MW\n",
      "Stunde 11 : 400.0 MW\n",
      "Stunde 12 : 400.0 MW\n",
      "Stunde 13 : 400.0 MW\n",
      "Stunde 14 : 400.0 MW\n",
      "Stunde 15 : 400.0 MW\n",
      "Stunde 16 : 400.0 MW\n",
      "Stunde 17 : 400.0 MW\n",
      "Stunde 18 : 400.0 MW\n",
      "Stunde 19 : 400.0 MW\n",
      "Stunde 20 : 400.0 MW\n",
      "Stunde 21 : 400.0 MW\n",
      "Stunde 22 : 400.0 MW\n",
      "Stunde 23 : 400.0 MW\n",
      "\n",
      "Einspeiseleistung Kohle n\n",
      "Stunde 0 : 160.3257328990228 MW\n",
      "Stunde 1 : 146.31921824104234 MW\n",
      "Stunde 2 : 114.13680781758956 MW\n",
      "Stunde 3 : 104.885993485342 MW\n",
      "Stunde 4 : 332.5954075682631 MW\n",
      "Stunde 5 : 148.30618892508141 MW\n",
      "Stunde 6 : 433.2964169381107 MW\n",
      "Stunde 7 : 528.2801302931596 MW\n",
      "Stunde 8 : 570.7491856677525 MW\n",
      "Stunde 9 : 567.5114006514658 MW\n",
      "Stunde 10 : 587.2540716612377 MW\n",
      "Stunde 11 : 593.0 MW\n",
      "Stunde 12 : 600.0 MW\n",
      "Stunde 13 : 600.0 MW\n",
      "Stunde 14 : 600.0 MW\n",
      "Stunde 15 : 600.0 MW\n",
      "Stunde 16 : 600.0 MW\n",
      "Stunde 17 : 600.0 MW\n",
      "Stunde 18 : 600.0 MW\n",
      "Stunde 19 : 600.0 MW\n",
      "Stunde 20 : 511.04334910573164 MW\n",
      "Stunde 21 : 377.5626219062466 MW\n",
      "Stunde 22 : 293.82402268591795 MW\n",
      "Stunde 23 : 239.1530944625407 MW\n",
      "\n",
      "Einspeiseleistung Gasturbine n\n",
      "Stunde 0 : 0.0 MW\n",
      "Stunde 1 : 0.0 MW\n",
      "Stunde 2 : 0.0 MW\n",
      "Stunde 3 : 0.0 MW\n",
      "Stunde 4 : 0.0 MW\n",
      "Stunde 5 : 0.0 MW\n",
      "Stunde 6 : 0.0 MW\n",
      "Stunde 7 : 0.0 MW\n",
      "Stunde 8 : 0.0 MW\n",
      "Stunde 9 : 0.0 MW\n",
      "Stunde 10 : 0.0 MW\n",
      "Stunde 11 : 0.0 MW\n",
      "Stunde 12 : 0.0 MW\n",
      "Stunde 13 : 0.0 MW\n",
      "Stunde 14 : 0.0 MW\n",
      "Stunde 15 : 96.89473684210526 MW\n",
      "Stunde 16 : 125.02402844072282 MW\n",
      "Stunde 17 : 160.71890803732515 MW\n",
      "Stunde 18 : 154.81164802110916 MW\n",
      "Stunde 19 : 31.410009168922496 MW\n",
      "Stunde 20 : 0.0 MW\n",
      "Stunde 21 : 0.0 MW\n",
      "Stunde 22 : 0.0 MW\n",
      "Stunde 23 : 0.0 MW\n",
      "\n",
      "Einspeiseleistung Wind n\n",
      "Stunde 0 : 159.6742671009772 MW\n",
      "Stunde 1 : 133.68078175895766 MW\n",
      "Stunde 2 : 125.86319218241043 MW\n",
      "Stunde 3 : 115.11400651465799 MW\n",
      "Stunde 4 : 92.34527687296416 MW\n",
      "Stunde 5 : 111.69381107491857 MW\n",
      "Stunde 6 : 102.70358306188925 MW\n",
      "Stunde 7 : 97.71986970684038 MW\n",
      "Stunde 8 : 139.25081433224756 MW\n",
      "Stunde 9 : 150.4885993485342 MW\n",
      "Stunde 10 : 173.7459283387622 MW\n",
      "Stunde 11 : 179.0 MW\n",
      "Stunde 12 : 145.79804560260587 MW\n",
      "Stunde 13 : 120.0 MW\n",
      "Stunde 14 : 70.0 MW\n",
      "Stunde 15 : 45.0 MW\n",
      "Stunde 16 : 54.82084690553746 MW\n",
      "Stunde 17 : 71.62866449511401 MW\n",
      "Stunde 18 : 91.56351791530945 MW\n",
      "Stunde 19 : 86.8729641693811 MW\n",
      "Stunde 20 : 88.14332247557003 MW\n",
      "Stunde 21 : 122.05211726384364 MW\n",
      "Stunde 22 : 145.99348534201954 MW\n",
      "Stunde 23 : 160.8469055374593 MW\n",
      "\n",
      "Einspeiseleistung PV n\n",
      "Stunde 0 : 0.0 MW\n",
      "Stunde 1 : 0.0 MW\n",
      "Stunde 2 : 0.0 MW\n",
      "Stunde 3 : 0.0 MW\n",
      "Stunde 4 : 0.0 MW\n",
      "Stunde 5 : 0.0 MW\n",
      "Stunde 6 : 4.0 MW\n",
      "Stunde 7 : 14.0 MW\n",
      "Stunde 8 : 30.0 MW\n",
      "Stunde 9 : 42.0 MW\n",
      "Stunde 10 : 49.0 MW\n",
      "Stunde 11 : 48.0 MW\n",
      "Stunde 12 : 45.0 MW\n",
      "Stunde 13 : 40.0 MW\n",
      "Stunde 14 : 28.0 MW\n",
      "Stunde 15 : 14.0 MW\n",
      "Stunde 16 : 4.0 MW\n",
      "Stunde 17 : 0.0 MW\n",
      "Stunde 18 : 0.0 MW\n",
      "Stunde 19 : 0.0 MW\n",
      "Stunde 20 : 0.0 MW\n",
      "Stunde 21 : 0.0 MW\n",
      "Stunde 22 : 0.0 MW\n",
      "Stunde 23 : 0.0 MW\n",
      "\n",
      "Pump- und Turbinierleistung je Stunde\n",
      "Stunde 0 : P. 0.0 MW T. 0.0 MW Speicherstand: 0.0 MW\n",
      "Stunde 1 : P. 0.0 MW T. 0.0 MW Speicherstand: 0.0 MW\n",
      "Stunde 2 : P. 0.0 MW T. 0.0 MW Speicherstand: 0.0 MW\n",
      "Stunde 3 : P. 0.0 MW T. 0.0 MW Speicherstand: 0.0 MW\n",
      "Stunde 4 : P. 205.0 MW T. 0.0 MW Speicherstand: 184.0 MW\n",
      "Stunde 5 : P. 0.0 MW T. 0.0 MW Speicherstand: 184.0 MW\n",
      "Stunde 6 : P. 0.0 MW T. 0.0 MW Speicherstand: 184.0 MW\n",
      "Stunde 7 : P. 0.0 MW T. 0.0 MW Speicherstand: 184.0 MW\n",
      "Stunde 8 : P. 0.0 MW T. 0.0 MW Speicherstand: 184.0 MW\n",
      "Stunde 9 : P. 0.0 MW T. 0.0 MW Speicherstand: 184.0 MW\n",
      "Stunde 10 : P. 0.0 MW T. 0.0 MW Speicherstand: 184.0 MW\n",
      "Stunde 11 : P. 0.0 MW T. 0.0 MW Speicherstand: 184.0 MW\n",
      "Stunde 12 : P. 0.0 MW T. 9.0 MW Speicherstand: 174.0 MW\n",
      "Stunde 13 : P. 0.0 MW T. 20.0 MW Speicherstand: 152.0 MW\n",
      "Stunde 14 : P. 0.0 MW T. 72.0 MW Speicherstand: 72.0 MW\n",
      "Stunde 15 : P. 0.0 MW T. 34.0 MW Speicherstand: 34.0 MW\n",
      "Stunde 16 : P. 0.0 MW T. 16.0 MW Speicherstand: 16.0 MW\n",
      "Stunde 17 : P. 0.0 MW T. 8.0 MW Speicherstand: 8.0 MW\n",
      "Stunde 18 : P. 0.0 MW T. 4.0 MW Speicherstand: 4.0 MW\n",
      "Stunde 19 : P. 0.0 MW T. 2.0 MW Speicherstand: 2.0 MW\n",
      "Stunde 20 : P. 0.0 MW T. 1.0 MW Speicherstand: 1.0 MW\n",
      "Stunde 21 : P. 0.0 MW T. 0.0 MW Speicherstand: 0.0 MW\n",
      "Stunde 22 : P. 0.0 MW T. 0.0 MW Speicherstand: 0.0 MW\n",
      "Stunde 23 : P. 0.0 MW T. 0.0 MW Speicherstand: 0.0 MW\n",
      "\n",
      "Gesamtkosten der Stromversorgung:  1800732.91 €\n",
      "Gesamtemissionen:  12565.23 tCO2\n"
     ]
    }
   ],
   "source": [
    "# 3.3 a) Modell inkl. Speicher\n",
    "storage_capacity = 600  # Kapazität des Speichers in MW\n",
    "storage_power = 300 # Trubinen-/ Generator-Leistung\n",
    "charge_efficiency = 0.9  # Ladeeffizienz des Speichers\n",
    "discharge_efficiency = 0.9  # Entladeeffizienz des Speichers\n",
    "\n",
    "model = ConcreteModel()\n",
    "model.x = Var(Generators, timesteps, within=NonNegativeReals)\n",
    "model.pump = Var(timesteps, within = NonNegativeReals)  \n",
    "model.turbine = Var(timesteps, within = NonNegativeReals) \n",
    "model.storage = Var(timesteps, within = NonNegativeReals)\n",
    "\n",
    "# Zielfunktion angeben!\n",
    "model.obj = Objective(\n",
    "    expr =sum(sum(model.x[g,t]*MC[g] for g in Generators)for t in timesteps), # nur die Summe ändert sich und läuft über alle Generators und nicht nur thermalPlant\n",
    "    sense=minimize)\n",
    "\n",
    "def all_power_constraint_rule(model, g, t): #hab sie neu benannt, aber eigentlich unnötig\n",
    "        return model.x[g,t] <= power_all.loc[t,g]\n",
    "model.all_power_con = Constraint(Generators, \n",
    "                             timesteps, \n",
    "                             rule = all_power_constraint_rule)\n",
    "\n",
    "def all_load_constraint_rule(model, t): #hab sie neu benannt, aber eigentlich unnötig   \n",
    "   return sum(model.x[g,t] for g in Generators) + model.turbine[t] - model.pump[t] == load.loc[t]\n",
    "model.load_con = Constraint(timesteps, \n",
    "                            rule = all_load_constraint_rule)\n",
    "\n",
    "def wind_constraint_rule(model,t):\n",
    "    return (model.x['Wind',t]) == power_all.loc[t, 'Wind']\n",
    "model.wind_con = Constraint(timesteps, rule = wind_constraint_rule)\n",
    "\n",
    "def pv_constraint_rule(model,t):\n",
    "    return (model.x['PV',t]) == power_all.loc[t, 'PV']\n",
    "model.pv_con = Constraint(timesteps, rule = pv_constraint_rule)  \n",
    "\n",
    "# Constraints für Pumpen/Turbinieren\n",
    "def pump_rule(model,t):\n",
    "    return model.pump[t] <= storage_power\n",
    "model.pump_con = Constraint(timesteps, rule = pump_rule)\n",
    "\n",
    "def turb_rule(model,t):\n",
    "    return model.turbine[t] <= storage_power\n",
    "model.turb_con = Constraint(timesteps, rule = turb_rule)\n",
    "\n",
    "def turb_rule2(model,t):\n",
    "    return model.turbine[t] <= model.storage[t]\n",
    "model.turb_con2 = Constraint(timesteps, rule = turb_rule2)\n",
    "\n",
    "model.turb_con_0 = Constraint(expr = (model.turbine[0] == 0))\n",
    "\n",
    "# Constraints für Speicherstand\n",
    "model.storage_con = Constraint(expr = (model.storage[0] == model.storage[23]))\n",
    "model.storage_con_0 = Constraint(expr = (model.storage[0] == 0))\n",
    "\n",
    "def storage_rule_soc(model,t):\n",
    "    return model.storage[t] == (model.storage[t-1] - model.turbine[t] / discharge_efficiency + model.pump[t] * charge_efficiency)\n",
    "model.storage_con_soc = Constraint(timesteps[1:len(timesteps)-1], rule = storage_rule_soc)\n",
    "\n",
    "def storage_rule_max(model,t):\n",
    "    return model.storage[t] <= storage_capacity\n",
    "model.storage_con_max = Constraint(timesteps, rule = storage_rule_max)\n",
    "\n",
    "\n",
    "opt = SolverFactory('gurobi')\n",
    "opt_success = opt.solve(model)\n",
    "\n",
    "# get values of optimization variables\n",
    "PowerTotal = pd.DataFrame(index = timesteps, columns = Generators)\n",
    "for n in Generators:\n",
    "    print()\n",
    "    print(\"Einspeiseleistung\", n, \"n\")\n",
    "    for t in timesteps:\n",
    "        PowerTotal.loc[t, n] = model.x[n,t].value\n",
    "        print(\"Stunde\", t, \":\", PowerTotal.loc[t, n], \"MW\")\n",
    "print()\n",
    "\n",
    "column_names =['Pumpen', 'Turbinieren', 'Speicherstand']\n",
    "storage = pd.DataFrame(index = timesteps, columns = column_names)\n",
    "print(\"Pump- und Turbinierleistung je Stunde\")\n",
    "for t in timesteps:\n",
    "    storage.loc[t, 'Pumpen'] = model.pump[t].value\n",
    "    storage.loc[t, 'Turbinieren'] = model.turbine[t].value\n",
    "    storage.loc[t, 'Speicherstand'] = model.storage[t].value\n",
    "    print(\"Stunde\", t, \":\", \"P.\", np.round(storage.loc[t, 'Pumpen']), \"MW\", \"T.\", np.round(storage.loc[t, 'Turbinieren']), \"MW\", \"Speicherstand:\", np.round(storage.loc[t, 'Speicherstand']), \"MW\")\n",
    "print()\n",
    "    \n",
    "\n",
    "# Gesamtkosten der Stromversorgung ausgeben (Lösung des Modells der Minimierung der Kosten)\n",
    "print(\"Gesamtkosten der Stromversorgung: \", np.round(model.obj(), 2), \"€\")\n",
    "\n",
    "# Gesamte Treibhausgasemissionen berechnen\n",
    "total_energy_coal = PowerTotal['Kohle'].sum()\n",
    "total_energy_GuD = PowerTotal['GuD'].sum()\n",
    "total_energy_gas = PowerTotal['Gasturbine'].sum()\n",
    "total_emissions = total_energy_coal * emissions['Kohle'] + total_energy_GuD * emissions['GuD'] + total_energy_gas * emissions['Gasturbine']\n",
    "print(\"Gesamtemissionen: \", np.round(total_emissions, 2), \"tCO2\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 48,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Stromkosten in Stunde 0 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 1 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 2 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 3 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 4 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 5 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 6 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 7 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 8 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 9 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 10 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 11 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 12 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 13 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 14 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 15 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 16 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 17 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 18 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 19 : 115.0 €/MWh\n",
      "Stromkosten in Stunde 20 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 21 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 22 : 92.68 €/MWh\n",
      "Stromkosten in Stunde 23 : 92.68 €/MWh\n"
     ]
    }
   ],
   "source": [
    "# 3.3 d) Stündlicher Strompreis\n",
    "\n",
    "for t in timesteps:\n",
    "    maxMC=0\n",
    "    for n in Generators:\n",
    "        if model.x[n,t].value >0:\n",
    "            if MC[n] > maxMC:\n",
    "                maxMC = MC[n]\n",
    "    print('Stromkosten in Stunde', t, ':', np.round(maxMC,2), '€/MWh')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.7"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
